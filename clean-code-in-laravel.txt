Source: https://medium.com/@elijah_williams_agc/10-tips-for-updating-your-laravel-coding-techniques-55a966a2912c

Using the dependency injection, which makes the code more testable and flexible.
The Laravel service container is powerful for managing class dependencies and performing dependency injection.

Eg:

use Illuminate\Contracts\Cache\Repository as Cache;

public function __construct(Cache $cache)

{

    $this->cache = $cache;

}

public function index()

{

    $users = $this->cache->remember(‘users’, 60, function () {

    return User::all();

    });

}


Another example is the use of raw SQL queries instead of Eloquent ORM.
Eloquent provides a more readable, maintainable, and secure way to interact with the database.

Shifting to Eloquent ORM can significantly reduce the risk of SQL injection.
Eloquent automatically handles escaping user input, ensuring that any data passed to queries is properly sanitized.

For example, instead of writing raw SQL queries like this:
$query = "SELECT * FROM users WHERE email = '$email'";

Eloquent would allow you to do this:
$user = User::where('email', $email)->first();


# Scope Queries
Scope queries in Laravel are custom query constraints that you define in your Eloquent models.
These scopes allow you to encapsulate commonly used query logic and reuse it across your application.

Example:
You might frequently need to fetch only active users or filter posts by their published date.
You can define a scope to handle these queries.


// In User model
public function scopeActive($query)
{
    return $query->where('status', 'active');
}

// Usage:
$activeUsers = User::active()->get();

# Eager Loading

To avoid this, use eager loading with the with method:
$posts = Post::with('comments')->get();  // Eager load comments with posts in a single query

foreach ($posts as $post) {
    echo $post->comments;  // No extra queries for comments
}

#Adopt Repository Pattern for Database Interaction
For complex applications, adopting the repository and service patterns can help decouple your application from Laravel’s Eloquent ORM.
This will make your codebase more testable, maintainable, and adaptable to future changes.

    For example, if you have a Post model, create an interface like this:
    namespace App\Repositories;

interface PostRepositoryInterface
{
    public function getAll();
    public function find($id);
    public function create(array $data);
    public function update($id, array $data);
    public function delete($id);
}

 Create a Concrete Repository Class
namespace App\Repositories;

use App\Models\Post;

class PostRepository implements PostRepositoryInterface
{
    protected $model;

    public function __construct(Post $post)
    {
        $this->model = $post;
    }

    public function getAll()
    {
        return $this->model->all();
    }

    public function find($id)
    {
        return $this->model->find($id);
    }

    public function create(array $data)
    {
        return $this->model->create($data);
    }

    public function update($id, array $data)
    {
        $post = $this->model->find($id);
        return $post ? $post->update($data) : null;
    }

    public function delete($id)
    {
        $post = $this->model->find($id);
        return $post ? $post->delete() : null;
    }
}

    Now, you need to bind the interface to the concrete repository class in a service provider.
    You can do this in the AppServiceProvider or create a new one.

namespace App\Providers;

use Illuminate\Support\ServiceProvider;
use App\Repositories\PostRepositoryInterface;
use App\Repositories\PostRepository;

class AppServiceProvider extends ServiceProvider
{
    public function register()
    {
        $this->app->bind(PostRepositoryInterface::class, PostRepository::class);
    }

    public function boot()
    {
        //
    }
}

  In your controllers, you can inject the repository interface and use it to interact with the database.
  namespace App\Http\Controllers;

  use App\Repositories\PostRepositoryInterface;

  class PostController extends Controller
  {
      protected $postRepository;

      public function __construct(PostRepositoryInterface $postRepository)
      {
          $this->postRepository = $postRepository;
      }

      public function index()
      {
          $posts = $this->postRepository->getAll();
          return view('posts.index', compact('posts'));
      }

      public function show($id)
      {
          $post = $this->postRepository->find($id);
          return view('posts.show', compact('post'));
      }

      // Other controller actions can follow...
  }

## Using queues for time-consuming tasks in Laravel is an excellent way to improve the performance and responsiveness of your application. By offloading heavy tasks to a queue, you ensure that the user doesn’t have to wait for these tasks to complete before receiving a response.

Here’s how you can use queues in Laravel:

To set up a queue driver, open your .env file and specify your preferred driver:
QUEUE_CONNECTION=database

Create a Job
You can create a job class using the Artisan command:
    php artisan make:job SendEmail

    public function handle()
    {
        Mail::to($this->user->email)->send(new WelcomeEmail($this->user));
    }


Dispatch the Job
To dispatch the job to the queue, use the dispatch() method:
    SendEmail::dispatch($user);

 Process the Queue
To process jobs, you need to run the queue worker.
You can start a worker in the terminal with this command:
php artisan queue:work


Handling Failed Jobs
If a job fails, Laravel provides built-in support for failed job handling. You can configure failed job storage in the config/queue.php file. You can retry failed jobs or inspect them later.

For example, you can check for failed jobs with:
php artisan queue:failed


// # SOLID Principles in Laravel
     SOLID is an acronym for five design principles that help guide developers toward creating maintainable and flexible code. Here’s a quick rundown of each principle and how they can be applied to Laravel:

     S - Single Responsibility Principle (SRP) # //
    The Single Responsibility Principle states that a class should have only one reason to change,
    meaning it should only have one job or responsibility.

    // Example of violating SRP in a controller
    class PostController extends Controller {
        public function store(Request $request) {
            $post = Post::create($request->all());
            Notification::send($user, new PostCreated($post)); // This violates SRP.
            return redirect()->route('posts.index');
        }
    }

    // Refactored version applying SRP
    class PostController extends Controller {
        protected $notificationService;

        public function __construct(NotificationService $notificationService) {
            $this->notificationService = $notificationService;
        }

        public function store(Request $request) {
            $post = Post::create($request->all());
            $this->notificationService->sendPostCreatedNotification($post);
            return redirect()->route('posts.index');
        }
    }

    class NotificationService {
        public function sendPostCreatedNotification($post) {
            Notification::send($user, new PostCreated($post));
        }
    }


     O - Open/Closed Principle (OCP)
        The Open/Closed Principle states that software entities should be open for extension but closed for modification.
        You should be able to add new functionality without altering existing code.

        Laravel Example: Laravel's service container and service providers make it easy to extend functionality without modifying core classes.
        For example, if you have a notification system, you can create new notification channels (e.g., SMS, email) without changing the existing notification code.

        // You can extend the Notification class to add more channels
        class NewSmsChannel extends SmsChannel {
            public function send($notifiable, Notification $notification) {
                // custom logic for sending SMS
            }
        }

        // Add it to your service container
        app()->bind(SmsChannel::class, NewSmsChannel::class);


     L - Liskov Substitution Principle (LSP)
        The Liskov Substitution Principle states that objects of a superclass should be replaceable with objects of a subclass
        without affecting the correctness of the program.

        Laravel Example: If you have an abstract class or interface for sending notifications,
        your subclasses (like email or SMS notifications) should be replaceable without causing errors.
        For instance, if you're using polymorphism for notifications, the class or interface methods should behave correctly when substituted.

        interface NotificationChannel {
            public function send(Notification $notification);
        }

        class EmailChannel implements NotificationChannel {
            public function send(Notification $notification) {
                // Send via email
            }
        }

        class SmsChannel implements NotificationChannel {
            public function send(Notification $notification) {
                // Send via SMS
            }
        }

     I - Interface Segregation Principle (ISP)
         The Interface Segregation Principle states that no client should be forced to depend on methods it does not use.
         In other words, create small, specific interfaces rather than large, general-purpose ones.

         Laravel Example: Instead of creating one large NotificationServiceInterface,
         you could create more granular interfaces like EmailNotificationInterface and SmsNotificationInterface,
         depending on which type of notification a service class implements.


        interface EmailNotificationInterface {
            public function sendEmail(Notification $notification);
        }

        interface SmsNotificationInterface {
            public function sendSms(Notification $notification);
        }

     D - Dependency Inversion Principle (DIP)
        The Dependency Inversion Principle suggests that high-level modules should not depend on low-level modules,
        but both should depend on abstractions. In Laravel, the service container is often used to achieve
        this by injecting dependencies rather than directly instantiating them.

        Laravel Example: Instead of tightly coupling a controller to a specific implementation
        (e.g., a database repository), inject the repository interface into the controller.


# Strategy Pattern
The Strategy Pattern allows you to define a family of algorithms (or strategies) and make them interchangeable.
This is useful when you need to choose between different actions or algorithms dynamically.

Example: Consider different shipping strategies (e.g., standard, express) for processing an order.
You can use the Strategy Pattern to define each shipping strategy and make the strategy swappable.


interface ShippingStrategyInterface {
    public function calculateShippingCost(Order $order): float;
}

class StandardShipping implements ShippingStrategyInterface {
    public function calculateShippingCost(Order $order): float {
        return 5.0; // Standard rate
    }
}

class ExpressShipping implements ShippingStrategyInterface {
    public function calculateShippingCost(Order $order): float {
        return 10.0; // Express rate
    }
}

class OrderService {
    protected ShippingStrategyInterface $shippingStrategy;

    public function __construct(ShippingStrategyInterface $shippingStrategy) {
        $this->shippingStrategy = $shippingStrategy;
    }

    public function calculateOrderShipping(Order $order): float {
        return $this->shippingStrategy->calculateShippingCost($order);
    }
}

// Usage example
$orderService = new OrderService(new StandardShipping());
$orderShippingCost = $orderService->calculateOrderShipping($order);
